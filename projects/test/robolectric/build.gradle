apply plugin: 'com.android.application'
apply plugin: 'com.tencent.shadow.plugin'

buildscript {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
    }

    dependencies {
        classpath 'com.tencent.shadow.core:manifest-parser'
        classpath 'com.tencent.shadow.core:gradle-plugin'
    }
}

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
        applicationId project.ROBOLECTRIC_TEST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            unitTests.all {
                systemProperty 'robolectric.dependency.repo.url', 'https://mirrors.tencent.com/nexus/repository/maven-public/'
                systemProperty 'robolectric.dependency.repo.id', 'tencentMirror'
            }
        }

    }

    aaptOptions {
        additionalParameters "--package-id", "0x7E", "--allow-reserved-package-id"
    }
}

dependencies {
    implementation 'com.tencent.shadow.core:common'
    implementation 'com.tencent.shadow.core:loader'
    implementation 'com.tencent.shadow.core:activity-container'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.8'
}

//afterEvaluate {
//    android.applicationVariants.each {
//        def manifestProcessorTask = it.outputs.first().processManifestProvider.get()
//        def manifestXmlFile = manifestProcessorTask.mainMergedManifest.get().getAsFile()
//        def variantName = it.name
//        def outputDir = project.file("build/generated/source/pluginManifest/${variantName}")
//
//        def generatePluginManifestTask =
//                project.tasks.register("generate${variantName.capitalize()}PluginManifest") {
//                    it.dependsOn(manifestProcessorTask)
//                    it.inputs.file(manifestXmlFile)
//                    it.outputs.dir(outputDir).withPropertyName("outputDir")
//
//                    def packageForR = "com.tencent.shadow.test.robolectric"
//
//                    it.doLast {
//                        ManifestParserKt.generatePluginManifest(
//                                manifestXmlFile,
//                                outputDir,
//                                "com.tencent.shadow.core.manifest_parser",
//                                packageForR
//                        )
//                    }
//                }
//
//        def javacTask = project.tasks.getByName("compile${variantName.capitalize()}JavaWithJavac")
//        javacTask.dependsOn(generatePluginManifestTask)
//
//        def relativePath = project.projectDir.toPath().relativize(outputDir.toPath()).toString()
//        javacTask.source(project.fileTree(relativePath))
//    }
//}
